<?php
/* @var $model Foomo\Services\ProxyGenerator\JS\JQuery */
/* @var $op Foomo\Services\Reflection\ServiceOperation */
?>
/*

  !!! DO NOT EDIT THIS FILE / CODE IT WAS GENERATED !!!

  generated @<?= date('Y-m-d H:i:s') ?>

  on <?= \Foomo\Utils::getServerUrl() ?>

  THUS, if you this code is missing operations - just regenerate it.

  Oh and if you do not like this code -> fix the generator ;)


*/

(function( window ) {
	var mixinStub = function(operation, arguments) {
		operation.data = {
			endPoint: window.<?= $model->getProxyName() ?>.endPoint,
			server: window.<?= $model->getProxyName() ?>.server,
			arguments: arguments,
			complete: false,
			pending: false,
			result: null,
			exception: null,
			error: [],
			messages: [],
			ajax: null
		};
		operation.server = function(server) {
			this.data.server = server;
			return this;
		};
		operation.endPoint = function(endPoint) {
			this.data.endPoint = endPoint;
			return this;
		};
	};
	
	var transport = function(operation, url, postData) {
		var errorHandler = function(error) {
			operation.data.success = false;
			operation.data.error = error;
			if(operation.data._errorCallback) {
				operation.data._errorCallback(operation);
			}
		};
		operation.data.ajax = $.ajax({
			dataType: 'json',
			url: url,
			type: postData === null?'GET':'POST',
			data: JSON.stringify(postData),
			
			success: function(data) {
				if(data !== null) {
					operation.data.result = data.value;
					operation.data.exception = data.exception;
					operation.data.messages = data.messages;
					if(operation.data.exception !== null && typeof operation.data._errorCallback == "function") {
						errorHandler(data);
					} else if(!operation.data.exception) {
						operation.data.success = true;
						operation.data._successCallback(operation);
					}
				} else {
					errorHandler('transport threw up');
				}
				operation.data.pending = false;				
			},
			error: errorHandler
		});
		return operation;
	};
	// if you do not like "<?= $model->getProxyName() ?>" as a name change,
	// then call ->clientNamespace('WhatEver.You.Like') on the server
<?
	$package = 'window';
	foreach (array_slice(explode('.', $model->getProxyName()), 0, -1) as $value) {
		$package .= '.' . $value;
		echo '	' . $package .' = ' . $package . ' || {};' . PHP_EOL;
	}
?>
	window.<?= $model->getProxyName() ?> = {
		server: '', // '<?= Foomo\Utils::getServerUrl() ?>'  it is better not to add your server here ;)
		endPoint: '<?= $model->endPoint ?>', 
		operations: {
<?
	$iOps = 0;
	foreach($model->operations as $op):
		$iOps ++;
		$argNames = $model->getArgNames($op);
?>
			/**
<?
				$lines = explode(PHP_EOL, $op->comment);
				foreach($lines as $line):
?>
			  * <?= $line ?>

<? endforeach; ?>
			  *
<? foreach($op->parameterDocs as $parmDocs): ?>
			  * @param <?= $parmDocs->type ?> <?= $parmDocs->name ?> <?= $parmDocs->comment ?>

<? endforeach; ?>
<? if($op->returnType): ?>
			  *
			  * @return <?= $op->returnType->type ?> <?= $op->returnType->comment ?>

<? endif; ?>
			  */
			<?= $op->name ?> : function(<?= implode(', ', $argNames) ?>) {
				return new function(<?= implode(', ', $argNames) ?>) {
					mixinStub( this, { <? $iArgs = 0; foreach($argNames as $argName): $iArgs ++; ?> <?= $argName ?> : <?= $argName ?><?= ($iArgs < count($argNames)?',':'') ?> <? endforeach; ?> });
					this.execute = function(successCallback) {
						this.data._successCallback = successCallback;
						var url = this.data.server + this.data.endPoint + '/<?= $op->name ?>'<?= (count($argNames)>0 && !$model->opHasComplexArgs($op))?'':';' . PHP_EOL ?>
<? if($model->opHasComplexArgs($op)): ?>
						var postData = {
<?
	$iArgs = 0;
	foreach($argNames as $argName):
		$iArgs ++;
?>
							<?= $argName ?> : this.data.arguments.<?= $argName ?><?= ($iArgs < count($argNames)?',':'') ?>

<? endforeach; ?>
						};
<? elseif(count($argNames) > 0): ?>
<? foreach($argNames as $argName): ?> + '/' + encodeURIComponent(this.data.arguments.<?=  $argName   ?>)<? endforeach; ?>;
<? else: ?>
<? endif; ?>
						return transport(this, url<?= $model->opHasComplexArgs($op)?', postData':'' ?>);
					};
					this.error = function(errorCallback) {
						this.data._errorCallback = errorCallback;
						return this;
					};
					return this;
				}(<?= implode(', ', $argNames) ?>);
			}<?= ($iOps<count($model->operations)?',':'') ?>

<? endforeach ?>

		}
	};
})(window);
