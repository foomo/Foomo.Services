<?php
/* @var $model Foomo\Services\ProxyGenerator\JS\JQuery */
/* @var $op Foomo\Services\Reflection\ServiceOperation */
?>
/*

  !!! DO NOT EDIT THIS FILE / CODE IT WAS GENERATED !!!

  generated @<?= date('Y-m-d H:i:s') ?>

  on <?= \Foomo\Utils::getServerUrl() ?>

  THUS, if you this code is missing operations - just regenerate it.

  Oh and if you do not like this code -> fix the generator ;)


*/

(function( window ) {
	// if you do not like "<?= $model->getProxyName() ?>" as a name change,
	// then change the $package parameter for RPC::serveClass()
<?
	$package = 'window';
	foreach (array_slice(explode('.', $model->getProxyName()), 0, -1) as $value) {
		$package .= '.' . $value;
		echo '	' . $package .' = ' . $package . ' || {};' . PHP_EOL;
	}
?>
	window.<?= $model->getProxyName() ?> = {
		server: '<?= Foomo\Utils::getServerUrl() ?>',
		endPoint: '<?= $model->endPoint ?>',
		/*
			note to self - this is javascript - there is no typing, thus the
			objects may not make sense or should become a json schema ...

		objects: {
<?
	$iTypes = 0;
	foreach($model->types as $type):
		$iTypes ++;
		/* @var $type Foomo\Services\Reflection\ServiceObjectType */
		if(!empty($type->phpDocEntry->comment)):
			foreach(explode(PHP_EOL, $type->phpDocEntry->comment) as $line):
?>
			// <?= $line ?>

<?
			endforeach;
		endif;
?>
			<?= $model->getJsTypeName($type) ?>: {
<?
	$iProp = 0;
	foreach($type->props as $name => $prop):
		$iProp ++;
		/* @var $prop Foomo\Services\Reflection\ServiceObjectType */
		foreach(explode(PHP_EOL, $prop->phpDocEntry->comment) as $line):
?>
				// <?= $line ?>

<?
		endforeach;
?>
				// <?= $model->getJsTypeName(new Foomo\Services\Reflection\ServiceObjectType($prop->type)) ?>

				<?= $name ?> : <?
					switch($prop->type) {
						case 'integer':
						case 'int':
							echo '0';
							break;
						case 'string':
							echo "'string'";
							break;
						case 'boolean':
						case 'bool':
							echo 'true';
							break;
						case 'float':
							echo '0.0';
							break;
						default:
							echo 'null';
					}
				?><?= ($iProp<count($type->props))?',':'' ?>

<? endforeach; ?>
			}<?= ($iTypes<count($model->types)?',':'') ?>

<? endforeach; ?>
		},
		*/
		operations: {
<?
	$iOps = 0;
	foreach($model->operations as $op):
		$iOps ++;
		$argNames = $model->getArgNames($op);
?>
			/**
<?
				$lines = explode(PHP_EOL, $op->comment);
				foreach($lines as $line):
?>
			  * <?= $line ?>

<? endforeach; ?>
			  *
<? foreach($op->parameterDocs as $parmDocs): ?>
			  * @param <?= $parmDocs->type ?> <?= $parmDocs->name ?> <?= $parmDocs->comment ?>

<? endforeach; ?>
<? if($op->returnType): ?>
			  *
			  * @return <?= $op->returnType->type ?> <?= $op->returnType->comment ?>

<? endif; ?>
			  */
			<?= $op->name ?> : function(<?= implode(', ', $argNames) ?>) {
				return new this._<?= $op->name ?>(<?= implode(', ', $argNames) ?>);
			},
			_<?= $op->name ?> : function(<?= implode(', ', $argNames) ?>) {
				this.data = {
					endPoint: <?= $model->getProxyName() ?>.endPoint,
					arguments: {
<?
	$iArgs = 0;
	foreach($argNames as $argName):
		$iArgs ++;
?>
						<?= $argName ?> : <?= $argName ?><?= ($iArgs < count($argNames)?',':'') ?>

<? endforeach; ?>
					},
					complete: false,
					pending: false,
					result: null,
					exception: null,
					errors: [],
					messages: [],
					ajax: null
				};
				this.execute = function(successCallback) {
					this.successCallback = successCallback;
					var me = this;
					this.data.ajax = $.ajax({
						dataType: 'JSON',
<? if($model->opHasComplexArgs($op)): ?>
						url:  window.<?= $model->getProxyName() ?>.server + this.data.endPoint + '/<?= $op->name ?>',
						data: {
<?
	$iArgs = 0;
	foreach($argNames as $argName):
		$iArgs ++;
?>
							<?= $argName ?> : this.data.arguments.<?= $argName ?><?= ($iArgs < count($argNames)?',':'') ?>

<? endforeach; ?>
						},
						type: 'POST',
<? else: ?>
						url: window.<?= $model->getProxyName() ?>.server + this.data.endPoint + '/<?= $op->name ?>'<? foreach($argNames as $argName): ?> + '/' + escape(this.data.arguments.<?=  $argName   ?>)<? endforeach; ?>,
<? endif; ?>
						success: function(data) {
							me.data.result = data.value;
							me.data.exception = data.exception;
							me.data.messages = data.messages;
							if(me.data.exception) {
								me._handleError();
							} else {
								me.data.success = true;
								me.successCallback(me);
							}
						},
						error: function(data) {
							me._handleError();
						}

					});
					return this;
				};
				this._handleError = function(){
					this.data.success = false;
					if(this.errorCallback) {
						this.errorCallback(this);
					}
				},
				this.error = function(errorCallback) {
					this.errorCallback = errorCallback;
					return this;
				};
				return this;

			}<?= ($iOps<count($model->operations)?',':'') ?>

<? endforeach ?>

		}
	};
})(window);
